image: docker:latest
services:
  - docker:dind

stages:
  - test
  - visualize
  - build
  - package
  - deploy

variables:
  IMAGE_NAME: lukekijung/cronmonitor

test-jdk11:
  stage: test
  image: gradle:6.6.1-jdk11
  script:
    - 'gradle test jacocoTestReport' # jacoco must be configured to create an xml report
  artifacts:
    paths:
      - build/jacoco/jacoco.xml

coverage-jdk11:
  # Must be in a stage later than test-jdk11's stage.
  # The `visualize` stage does not exist by default.
  # Please define it first, or chose an existing stage like `deploy`.
  stage: visualize
  image: registry.gitlab.com/haynes/jacoco2cobertura:1.0.7
  script:
    # convert report from jacoco to cobertura, using relative project path
    - python /opt/cover2cover.py build/jacoco/jacoco.xml /src/main/java/ > build/cobertura.xml
  needs: ["test-jdk11"]
  dependencies:
    - test-jdk11
  artifacts:
    reports:
      cobertura: build/cobertura.xml

build:
  image: gradle:7.0.2-jdk11
  stage: build
  script:
    - gradle clean build
  artifacts:
    paths:
      - build/libs/*.jar
  tags:
    - cronmonitor

package:
  stage: package
  script:
    - docker build -t $IMAGE_NAME .
    - docker login -u $DOCKERHUB_ID -p $DOCKERHUB_PASS
    - docker push $IMAGE_NAME
    - docker images | grep 'cronmonitor'
  only:
    - develop
    - master
  tags:
    - cronmonitor

deploy_staging:
  stage: deploy
  script:
    - apk upgrade && apk update
    - apk add openssh-client
    - apk add sshpass
    - sshpass -p "$STAGING_SERVER_PASS" ssh -o StrictHostKeyChecking=no $STAGING_SERVER_USER@$STAGING_SERVER_IP docker login -u $DOCKERHUB_ID -p $DOCKERHUB_PASS
    - sshpass -p "$STAGING_SERVER_PASS" ssh -o StrictHostKeyChecking=no $STAGING_SERVER_USER@$STAGING_SERVER_IP docker pull $IMAGE_NAME
    - sshpass -p "$STAGING_SERVER_PASS" ssh -o StrictHostKeyChecking=no $STAGING_SERVER_USER@$STAGING_SERVER_IP "docker container stop cronmonitor && docker container rm cronmonitor || true"
    - sshpass -p "$STAGING_SERVER_PASS" ssh -o StrictHostKeyChecking=no $STAGING_SERVER_USER@$STAGING_SERVER_IP docker run --name cronmonitor -p 80:8080 -d $IMAGE_NAME
  environment:
    name: staging
    url: $STAGING_SERVER_IP:80
  only:
    - develop
  tags:
    - cronmonitor
