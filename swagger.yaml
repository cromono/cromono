openapi: 3.0.0
info:
  version: 1.5.0
  title: cron-monitor
servers:
  - url: 'http://localhost:8081'
    description: '로컬 테스트 환경'
  - url: 'http://139.150.64.58:80'
    description: '스테이징 서버 환경 로컬 접속'
  - url: 'http://10.7.27.11:80'
    description: '스테이징 환경 gcloud 접속'
  - url: 'http://211.115.73.153:80'
    description: '배포 환경 로컬 접속'
  - url: 'http://10.7.27.8:80'
    description: '배포 환경 gcloud 접속'
  - url: 'http://182.162.142.151:8086'
    description: 'InfluxDB'
  - url: 'http://139.150.64.58:3306'
    description: 'MySQL DB 로컬 접속'
  - url: 'http://10.7.27.11:3306'
    description: 'MySQL DB gcloud 접속'
  - url: 'http://10.7.27.9:9092'
    description: '카프카 gcloud 접속'
  - url: 'http://182.162.142.151:9093'
    description: '카프카 로컬 접속'
  - url: 'http://localhost:6379'
    description: '테스트용 레디스 리프레시 토큰 DB'
  - url: '10.7.27.9:6379'
    description: '운영용 레디스 리프레시 토큰 DB'

paths:
  /auth/register:
    post:
      summary: '사용자 회원가입'
      operationId: addUser
      tags:
        - authentication
      requestBody:
        $ref: '#/components/requestBodies/PostUsers'
      responses:
        '201':
          description: '정상적으로 등록됨'
          content:
            application/json:
              schema:
                type: object
                properties:
                  account:
                    type: string
                    description: "사용자 ID"
                  name:
                    type: string
                    description: "사용자 이름"
                  email:
                    type: string
                    description: "사용자 이메일"
                  role:
                    type: string
                    description: "사용자 권한"
        '400':
          description: 'Bad request'
        '404':
          description: 'Not Found'
        '409':
          description: 'Conflict'
  /auth/local/login:
    post:
      summary: '사용자 로그인'
      operationId: authenticate
      tags:
        - authentication
      requestBody:
        $ref: '#/components/requestBodies/PostAuthentication'
      responses:
        '200':
          description: '로그인 성공'
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: "액세스 토큰"
                  refreshToken:
                    type: string
                    description: "리프레시 토큰"
                  accessTokenExpiresAt:
                    type: string
                    description: "엑세스 토큰 만료 시간"
        '401':
          description: 'Unauthorized'
  /auth/local/logout:
    post:
      summary: '사용자 로그아웃'
      operationId: unauthenticate
      tags:
        - authentication
      requestBody:
        $ref: '#/components/requestBodies/PostAuthentication'
      responses:
        '200':
          description: '로그아웃 성공'
        '400':
          description: 'Bad request'
  /auth/local/reissue:
    post:
      summary: '사용자 Access token 재발급'
      operationId: reissueAccessToken
      tags:
        - authentication
      requestBody:
        $ref: '#/components/requestBodies/PostReissue'
      responses:
        '201':
          description: '재발급 성공'
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: "액세스 토큰"
                  refreshToken:
                    type: string
                    description: "리프레시 토큰"
                  accessTokenExpiresAt:
                    type: string
                    description: "엑세스 토큰 만료 시간"
        '400':
          description: 'Bad request'
        '401':
          description: 'UnAuthorized'
  /cron-servers:
    get:
      summary: '크론 서버 목록 조회'
      operationId: getCronServers
      tags:
        - cron-servers
      responses:
        '200':
          description: '서버 목록 조회 성공'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Server'
    post:
      summary: '크론 서버 등록'
      operationId: addCronServer
      tags:
        - cron-servers
      requestBody:
        $ref: '#/components/requestBodies/PostCronServers'
      responses:
        '201':
          description: '정상적으로  등록됨'
          content:
            application/json:
              schema:
                type: object
                properties:
                  serverIp:
                    type: string
                    description: '등록된 크론 서버 ip'
        '400':
          description: 'Bad request'
        '409':
          description: 'Conflict'
  /cron-servers/{serverIp}:
    patch:
      summary: '크론 서버 수정'
      operationId: updateCronServer
      tags:
        - cron-servers
      parameters:
        - $ref: '#/components/parameters/serverIpPath'
      requestBody:
        $ref: '#/components/requestBodies/PatchCronServers'
      responses:
        '201':
          description: '정상적으로 수정됨'
          content:
            application/json:
              schema:
                type: object
                properties:
                  serverIp:
                    type: string
                    description: '변경된 크론 서버 ip'
        '400':
          description: 'Bad request'
        '404':
          description: 'Not Found'
        '409':
          description: 'Conflict'
    delete:
      summary: '크론 서버 삭제'
      operationId: deleteCronServer
      tags:
        - cron-servers
      parameters:
        - $ref: '#/components/parameters/serverIpPath'
      responses:
        '204':
          description: '정상적으로 삭제됨'
        '404':
          description: 'Not Found'
  /cron-servers/{serverIp}/cron-jobs:
    post:
      summary: '크론 job 등록'
      operationId: createCronJob
      tags:
        - cron-jobs
      parameters:
        - $ref: '#/components/parameters/serverIpPath'
      requestBody:
        $ref: '#/components/requestBodies/PostCronJobs'
      responses:
        '201':
          description: '정상적으로  등록됨'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        description: '등록된 크론 job id'
        '400':
          description: 'Bad request'
        '404':
          description: 'Not found'
    get:
      summary: '서버별 크론 job 목록 조회'
      operationId: readCronJobListByServer
      tags:
        - cron-jobs
      parameters:
        - $ref: '#/components/parameters/serverIpPath'
      responses:
        '200':
          description: '크론 job 목록 조회 성공'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CronJob'
  /cron-servers/{serverIp}/cron-jobs/{cronJobId}:
    patch:
      summary: '크론 job 수정'
      operationId: updateCronJob
      tags:
        - cron-jobs
      parameters:
        - $ref: '#/components/parameters/serverIpPath'
        - $ref: '#/components/parameters/cronJobIdPath'
      requestBody:
        $ref: '#/components/requestBodies/PatchCronJobs'
      responses:
        '201':
          description: '정상적으로 수정됨'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: '변경된 크론 job id'
        '400':
          description: 'Bad request'
    delete:
      summary: '크론 job 삭제'
      operationId: deleteCronjob
      tags:
        - cron-jobs
      parameters:
        - $ref: '#/components/parameters/serverIpPath'
        - $ref: '#/components/parameters/cronJobIdPath'
      responses:
        '204':
          description: '정상적으로  삭제됨'
        '400':
          description: 'Bad request'
  /cron-servers/{serverIp}/cron-jobs/{cronJobId}/processes:
    get:
      summary: '크론 프로세스 목록 조회'
      operationId: getCronProcesses
      tags:
        - cron-processes
      parameters:
        - $ref: '#/components/parameters/serverIpPath'
        - $ref: '#/components/parameters/cronJobIdPath'
      responses:
        '200':
          description: '프로세스 실행 목록 조회 성공'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CronProcess'
        '404':
          description: 'Not found'
    post:
      summary: '크론 프로세스 추가'
      operationId: addCronProcess
      tags:
        - cron-processes
      parameters:
        - $ref: '#/components/parameters/serverIpPath'
        - $ref: '#/components/parameters/cronJobIdPath'
      requestBody:
        $ref: '#/components/requestBodies/PostCronProcess'
      responses:
        '200':
          description: '크론 프로세스 정상 추가'
          content:
            application/json:
              schema:
                type: object
                properties:
                  cronJobId:
                    type: string
                    format: uuid
                  pid:
                    type: string
                  startTime:
                    type: string
                  endTime:
                    type: string
  /cron-servers/{serverIp}/cron-jobs/{cronJobId}/processes/{pid}:
    get:
      summary: '크론 프로세스 조회'
      operationId: getCronProcess
      tags:
        - cron-processes
      parameters:
        - $ref: '#/components/parameters/serverIpPath'
        - $ref: '#/components/parameters/cronJobIdPath'
        - $ref: '#/components/parameters/pidPath'
      responses:
        '200':
          description: '프로세스 조회 성공'
          content:
            application/json:
              schema:
                type: object
                properties:
                  cronJobId:
                    type: string
                    format: uuid
                  pid:
                    type: string
                  startTime:
                    type: string
                  endTime:
                    type: string
        '404':
          description: 'Not found'
    patch:
      summary: '크론 프로세스 수정'
      operationId: changeCronProcess
      tags:
        - cron-processes
      parameters:
        - $ref: '#/components/parameters/serverIpPath'
        - $ref: '#/components/parameters/cronJobIdPath'
        - $ref: '#/components/parameters/pidPath'
      requestBody:
        $ref: '#/components/requestBodies/PatchCronProcess'
      responses:
        '200':
          description: '프로세스 수정 성공'
          content:
            application/json:
              schema:
                type: object
                properties:
                  cronJobId:
                    type: string
                    format: uuid
                  pid:
                    type: string
                  startTime:
                    type: string
                  endTime:
                    type: string
        '404':
          description: 'Not found'
  /cron-servers/{serverIp}/cron-jobs/{cronJobId}/processes/{pid}/logs:
    get:
      summary: '프로세스 로그 목록 조회'
      operationId: getCronProcessLogs
      tags:
        - cron-processes
      parameters:
        - $ref: '#/components/parameters/serverIpPath'
        - $ref: '#/components/parameters/cronJobIdPath'
        - $ref: '#/components/parameters/pidPath'
      responses:
        '200':
          description: '로그 조회 성공'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CronLog'
        '404':
          description: 'Not found'
  /users:
    get:
      summary: '사용자 목록 조회'
      operationId: getUsers
      tags:
        - users
      responses:
        '200':
          description: '사용자 목록 조회 성공'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '404':
          description: 'Not found'
  /users/{userId}:
    patch:
      summary: '회원정보변경'
      operationId: changeUserInfo
      tags:
        - users
      parameters:
        - $ref: '#/components/parameters/userIdPath'
      requestBody:
        $ref: '#/components/requestBodies/PatchUser'
      responses:
        '201':
          description: '정상적으로  변경됨'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: 'Bad request'
        '404':
          description: 'Not Found'
        '409':
          description: 'Conflict'
    delete:
      summary: '회원탈퇴'
      operationId: deleteUser
      tags:
        - users
      parameters:
        - $ref: '#/components/parameters/userIdPath'
      responses:
        '204':
          description: '정상적으로  탈퇴됨'
        '404':
          description: 'Not Found'
    get:
      summary: '회원정보조회'
      operationId: getUserInfo
      tags:
        - users
      parameters:
        - $ref: '#/components/parameters/userIdPath'
      responses:
        '200':
          description: '회원정보 조회 성공'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: 'Not found'
  /teams:
    get:
      summary: '팀 목록 조회'
      operationId: getTeamList
      tags:
        - teams
      responses:
        '200':
          description: '정상적으로 조회됨'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    teamAccount:
                      type: string
                    name:
                      type: string
        '400':
          description: 'Bad request'
    post:
      summary: '팀 생성'
      operationId: createTeam
      tags:
        - teams
      requestBody:
        $ref: '#/components/requestBodies/PostTeams'
      responses:
        '201':
          description: '정상적으로 추가됨'
          content:
            application/json:
              schema:
                type: object
                properties:
                    teamAccount:
                      type: string
                    name:
                      type: string
        '400':
          description: 'Bad request'
  /teams/{teamId}:
    patch:
      summary: '팀명 수정'
      operationId: changeTeam
      tags:
        - teams
      parameters:
        - $ref: '#/components/parameters/teamIdPath'
      requestBody:
        $ref: '#/components/requestBodies/PatchTeam'
      responses:
        '201':
          description: '정상적으로 변경됨'
          content:
            application/json:
              schema:
                type: object
                properties:
                  teamAccount:
                    type: string
                  name:
                    type: string
        '400':
          description: 'Bad request'
    get:
      summary: '팀 조회'
      operationId: getTeam
      tags:
        - teams
      parameters:
        - $ref: '#/components/parameters/teamIdPath'
      responses:
        '200':
          description: '정상적으로 조회됨'
          content:
            application/json:
              schema:
                type: object
                properties:
                  teamAccount:
                    type: string
                  name:
                    type: string
        '400':
          description: 'Bad request'
    delete:
      summary: '팀 삭제'
      operationId: deleteTeam
      tags:
        - teams
      parameters:
        - $ref: '#/components/parameters/teamIdPath'
      responses:
        '204':
          description: '정상적으로 삭제됨'
        '400':
          description: 'Bad request'
  /teams/{teamId}/users:
    get:
      summary: '팀원 목록 조회'
      operationId: getMembers
      tags:
        - teams
      parameters:
        - $ref: '#/components/parameters/teamIdPath'
      responses:
        '200':
          description: '정상적으로 조회됨'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamMembers'
        '400':
          description: 'Bad request'
    post:
      summary: '팀원 추가'
      operationId: addMember
      tags:
        - teams
      parameters:
        - $ref: '#/components/parameters/teamIdPath'
      requestBody:
        $ref: '#/components/requestBodies/PostTeamUsers'
      responses:
        '201':
          description: '정상적으로 추가됨'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamMembers'
        '400':
          description: 'Bad request'
    patch:
      summary: '팀원 수정'
      operationId: changeMember
      tags:
        - teams
      parameters:
        - $ref: '#/components/parameters/teamIdPath'
      requestBody:
        $ref: '#/components/requestBodies/PatchTeamUsers'
      responses:
        '201':
          description: '정상적으로 수정됨'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamMembers'
        '400':
          description: 'Bad request'
  /teams/{teamId}/users/{userId} :
    delete:
      summary: '팀원 삭제( 팀에서 유저 제외)'
      operationId: deleteUserInTeam
      tags:
        - teams
      parameters:
        - $ref: '#/components/parameters/teamIdPath'
        - $ref: '#/components/parameters/userIdPath'
      responses:
        '204':
          description: '정상적으로 삭제됨'
        '400':
          description: 'Bad request'
  /cron-read-auths/users/{userId}/crons:
    get:
      summary: '유저 크론잡 리스트 조회'
      operationId: getUserCronJob
      tags:
        - cron-read-auths/users
      parameters:
        - $ref: '#/components/parameters/userIdPath'
      responses:
        '200':
          description: '정상적으로 조회됨'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserCronJob'
        '400':
          description: 'Bad request'
    post:
      summary: '유저 크론잡을 추가'
      operationId: addUserCronJob
      tags:
        - cron-read-auths/users
      parameters:
        - $ref: '#/components/parameters/userIdPath'
      requestBody:
        $ref: '#/components/requestBodies/PostCronReadAuthsUsersCrons'
      responses:
        '201':
          description: '정상적으로 추가됨'
          content:
            application/json:
              schema:
                type: object
                properties:
                  cronJobId:
                    type: string
                    format: uuid
                  userAccount:
                    type: string
        '400':
          description: 'Bad request'
  /cron-read-auths/users/{userId}/crons/{cronJobId}:
    delete:
      summary: '유저 크론잡을 삭제'
      operationId: deleteUserCronReadAuth
      tags:
        - cron-read-auths/users
      parameters:
        - $ref: '#/components/parameters/userIdPath'
        - $ref: '#/components/parameters/cronJobIdPath'
      responses:
        '204':
          description: '정상적으로 삭제됨'
        '400':
          description: 'Bad request'
  /cron-read-auths/teams/{teamId}/crons:
    get:
      summary: '팀 크론잡 리스트 조회'
      operationId: getTeamCronJob
      tags:
        - cron-read-auths/teams
      parameters:
        - $ref: '#/components/parameters/teamIdPath'
      responses:
        '200':
          description: '정상적으로 조회됨'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamCronJob'
        '400':
          description: 'Bad request'
    post:
      summary: '팀 크론잡을 추가'
      operationId: addTeamCronJob
      tags:
        - cron-read-auths/teams
      parameters:
        - $ref: '#/components/parameters/teamIdPath'
      requestBody:
        $ref: '#/components/requestBodies/PostCronReadAuthsTeamsCrons'
      responses:
        '201':
          description: '정상적으로 추가됨'
          content:
            application/json:
              schema:
                type: object
                properties:
                  cronJobId:
                    type: string
                    format: uuid
                  teamAccount:
                    type: string
        '400':
          description: 'Bad request'
  /cron-read-auths/teams/{teamId}/crons/{cronJobId}:
    delete:
      summary: '팀의 크론 조회 권한을 삭제한다'
      operationId: deleteTeamCronReadAuth
      tags:
        - cron-read-auths/teams
      parameters:
        - $ref: '#/components/parameters/teamIdPath'
        - $ref: '#/components/parameters/cronJobIdPath'
      responses:
        '204':
          description: '정상적으로 삭제됨'
        '400':
          description: 'Bad request'
  /notifications/users/{userId}:
    post:
      summary: '알림 구독 추가'
      operationId: addNoticeSubscription
      tags:
        - notifications
      parameters:
        - $ref: '#/components/parameters/userIdPath'
      requestBody:
        $ref: '#/components/requestBodies/PostNotificationsUsers'
      responses:
        '200':
          description: '정상적으로 변경됨'
          content:
            application/json:
              schema:
                type: object
                properties:
                  cronJobId:
                    type: string
                    format: uuid
        '400':
          description: 'Bad request'
    get:
      summary: '알림 구독 조회'
      operationId: getNoticeSubscription
      tags:
        - notifications
      parameters:
        - $ref: '#/components/parameters/userIdPath'
      responses:
        '200':
          description: '정상적으로 조회됨'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Aloow-Methods:
              schema:
                type: string
            Access-Control-Allow_Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    cronJobId:
                      type: string
                      format: uuid

        '400':
          description: 'Bad request'
  /notifications/users/{userId}/crons/{cronJobId}:
    delete:
      summary: '알림 구독 삭제'
      operationId: deleteNoticeSubscription
      tags:
        - notifications
      parameters:
        - $ref: '#/components/parameters/userIdPath'
        - $ref: '#/components/parameters/cronJobIdPath'
      responses:
        '204':
          description: '정상적으로 삭제됨'
        '400':
          description: 'Bad request'
  /notifications/notice:
    post:
      summary: '알림 추가'
      operationId: addNotice
      tags:
        - notifications
      requestBody:
        $ref: '#/components/requestBodies/PostNotice'
      responses:
        '200':
          description: '알림이 정상적으로 생성됨'
          content:
            application/json:
              schema:
                type: object
                properties:
                  noticeId:
                    type: string
                  cronJobId:
                    type: string
                    format: uuid
                  noticeType:
                    type: string
                  noticeMessage:
                    type: string
                  noticeCreateDateTime:
                    type: string
                  isRead:
                    type: boolean
        '400':
          description: 'Bad request'
  /notifications/users/{userId}/notice:
    get:
      summary: '알림 목록 조회'
      operationId: getNoticeList
      tags:
        - notifications
      parameters:
        - $ref: '#/components/parameters/userIdPath'
      responses:
        '200':
          description: '알림이 정상적으로 조회됨'
          content:
            applicaion/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    noticeId:
                      type: string
                    cronJobId:
                      type: string
                      format: uuid
                    noticeType:
                      type: string
                    noticeMessage:
                      type: string
                    noticeCreateDateTime:
                      type: string
                    isRead:
                      type: boolean
        '400':
          description: 'Bad request'
  /notifications/users/{userId}/notice/{noticeId}:
    get:
      summary: '알림 선택'
      operationId: selectNotice
      tags:
        - notifications
      parameters:
        - $ref: '#/components/parameters/userIdPath'
        - $ref: '#/components/parameters/noticeIdPath'
      responses:
        '200':
          description: '알림이 정상적으로 선택됨'
          content:
            application/json:
              schema:
                type: object
                properties:
                  noticeId:
                    type: string
                  cronJobId:
                    type: string
                    format: uuid
                  noticeType:
                    type: string
                  noticeMessage:
                    type: string
                  noticeCreateDateTime:
                    type: string
                  isRead:
                    type: boolean
        '400':
          description: 'Bad request'

  /notifications/users/{userId}/crons/{cronJobId}/webhooks:
    post:
      summary: '웹훅 추가'
      operationId: addWebhook
      tags:
        - webhook
      parameters:
        - $ref: '#/components/parameters/userIdPath'
        - $ref: '#/components/parameters/cronJobIdPath'
      requestBody:
        $ref: '#/components/requestBodies/PostWebhook'
      responses:
        '201':
          description: '정상적으로 추가됨'
        '400':
          description: 'Bad request'
        '404':
          description: 'Not found'
        '409':
          description: 'Conflict'
    get:
      summary: '웹훅 리스트 조회'
      operationId: getWebhooks
      tags:
        - webhook
      parameters:
        - $ref: '#/components/parameters/userIdPath'
        - $ref: '#/components/parameters/cronJobIdPath'
      responses:
        '200':
          description: '정상적으로 조회됨'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebhookSubscription'
        '400':
          description: 'Bad request'
    delete:
      summary: '알림에 대한 웹훅 일괄 삭제'
      operationId: deleteWebhooks
      tags:
        - webhook
      parameters:
        - $ref: '#/components/parameters/userIdPath'
        - $ref: '#/components/parameters/cronJobIdPath'
      responses:
        '204':
          description: '정상적으로 삭제됨'
        '400':
          description: 'Bad request'
  /notifications/users/{userId}/crons/{cronJobId}/webhooks/{webhookId}:
    patch:
      summary: '웹훅 수정'
      operationId: updateWebhook
      tags:
        - webhook
      parameters:
        - $ref: '#/components/parameters/userIdPath'
        - $ref: '#/components/parameters/cronJobIdPath'
        - $ref: '#/components/parameters/webhookIdPath'
      requestBody:
        $ref: '#/components/requestBodies/PatchWebhook'
      responses:
        '201':
          description: '정상적으로 변경됨'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookSubscription'
        '400':
          description: 'Bad request'
        '404':
          description: 'Not found'
        '409':
          description: 'Conflict'
    delete:
      summary: '웹훅 개별 삭제'
      operationId: deleteWebhookById
      tags:
        - webhook
      parameters:
        - $ref: '#/components/parameters/userIdPath'
        - $ref: '#/components/parameters/cronJobIdPath'
        - $ref: '#/components/parameters/webhookIdPath'
      responses:
        '204':
          description: '정상적으로 삭제됨'
        '404':
          description: 'Not found'
components:
  schemas:
    AccessToken:
      description: '액세스 토큰'
      type: object
      properties:
        token:
          type: string
    RefreshToken:
      description: '리프레시 토큰'
      type: object
      properties:
        token:
          type: string
    CronLog:
      description: '로그 내역'
      type: object
      properties:
        logTime:
          type: string
        cronJobId:
          type: string
          format: uuid
        pid:
          type: string
        log:
          type: string
    CronJob:
      description: '크론 job'
      type: object
      properties:
        UUID:
          type: string
          format: uuid
        serverIp:
          type: string
          format: ipv4, ipv6
        cronName:
          type: string
        cronExpr:
          type: string
        minStartTime:
          type: string
          format: date-time
        maxEndTime:
          type: string
          format: date-time
    CronProcess:
      description: '크론 프로세스'
      type: object
      properties:
        cronJobId:
          type: string
          format: uuid
        pid:
          type: string
        startTime:
          type: string
        endTime:
          type: string
    Server:
      description: '서버'
      type: object
      properties:
        serverIp:
          type: string
          format: ipv4, ipv6
          example: '1.1.1.1'
    User:
      description: '사용자'
      type: object
      properties:
        account:
          type: string
          example: 'testid'
        name:
          type: string
          example: 'testname'
        email:
          type: string
          format: email
          example: 'test@gabia.com'
        role:
          type: string
          example: 'ROLE_USER'
    TeamUser:
      description: '팀원'
      type: object
      properties:
        teamId:
          type: string
        uidId:
          type: string
        authId:
          type: string
    Team:
      description: '팀'
      type: object
      properties:
        teamId:
          type: string
        uidId:
          type: string
        authId:
          type: string
    WebhookSubscription:
      description: '웹훅'
      type: object
      properties:
        id:
          type: integer
          example: 1
        endpoint:
          type: string
          example: 'HIWORKS'
        url:
          type: string
          format: uri
          example: 'https://hooks.hiworks.com/messenger/hiworks/650b77a753596fc1de35398ba24b5d1e/hiworks/gabia'
    TeamMembers:
      description: '팀원리스트'
      type: object
      properties:
        userAccount:
          type: string
        teamAccount:
          type: string
        userName:
          type: string
        userEmail:
          type: string
        authType:
          type: string
    UserCronJob:
      description: '읽기 권한을 갖고 있는 유저 크론잡 리스트'
      type: object
      properties:
        userAccount:
          type: string
        cronJobId:
          type: string
          format: uuid
    TeamCronJob:
      description: '읽기 권한을 갖고 있는 팀 크론잡 리스트'
      type: object
      properties:
        teamAccount:
          type: string
        cronJobId:
          type: string
          format: uuid
  parameters:
    cronJobIdPath:
      name: cronJobId
      in: path
      description: '크론 job의 id'
      required: true
      schema:
        type: integer
    pidPath:
      name: pid
      required: true
      in: path
      description: '크론 프로세스 pid'
      schema:
        type: integer
    serverIpPath:
      name: serverIp
      in: path
      description: '크론 서버의 ip'
      required: true
      schema:
        type: string
        format: ipv4, ipv6
    userIdPath:
      name: userId
      in: path
      description: '유저의 id'
      required: true
      schema:
        type: string
    teamIdPath:
      name: teamId
      in: path
      description: '팀의 id'
      required: true
      schema:
        type: string
    webhookIdPath:
      name: webhookId
      in: path
      description: '웹훅의 id'
      required: true
      schema:
        type: string
    noticeIdPath:
      name: noticeId
      in: path
      description: '알림의 id'
      required: true
      schema:
        type: string
  requestBodies:
    PostAuthentication:
      description: '사용자 인증'
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - account
              - password
            properties:
              account:
                type: string
                example: "testid"
              password:
                type: string
                format: password
                example: "testpass"
    PostReissue:
      description: '엑세스 토큰 재발급'
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - refreshToken
            properties:
              refreshToken:
                type: string
    PostCronServers:
      description: '크론 서버 등록'
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - serverIp
            properties:
              serverIp:
                type: string
                format: ipv4, ipv6
                example: "1.1.1.1"
    PatchCronServers:
      description: '크론 서버 등록'
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              serverIp:
                type: string
                format: ipv4, ipv6
                example: "1.1.1.2"
    PostCronJobs:
      description: '크론 등록'
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - id
              - cronName
              - cronExpr
              - minStartTime
              - maxEndTime
              - serverIp
            properties:
              id:
                type: string
                format: uuid
                description: '크론잡의 UUID'
              cronName:
                type: string
                description: '크론잡 명칭'
              cronExpr:
                type: string
                description: '크론 표현식'
              minStartTime:
                type: string
                format: date-time
                description: '최소 시작시간'
              maxEndTime:
                type: string
                format: date-time
                description: '최대 종료시간'
              serverIp:
                type: string
                format: ipv4, ipv6
                description: '크론이 도는 서버의 ip'
    PatchCronJobs:
      description: '크론 수정'
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
                format: uuid
                description: '크론잡의 UUID'
              cronName:
                type: string
                description: '크론잡 명칭'
              cronExpr:
                type: string
                description: '크론 표현식'
              minStartTime:
                type: string
                format: date-time
                description: '최소 시작시간'
              maxEndTime:
                type: string
                format: date-time
                description: '최대 종료시간'
              serverIp:
                type: string
                format: ipv4, ipv6
                description: '크론이 도는 서버의 ip'
    PostCronProcess:
      description: '크론 프로세스 추가'
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              pid:
                type: string
              startTime:
                type: string
              endTime:
                type: string
    PatchCronProcess:
      description: '크론 프로세스 추가'
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              pid:
                type: string
              startTime:
                type: string
              endTime:
                type: string

    PostUsers:
      description: '사용자 등록'
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - account
              - name
              - email
              - password
            properties:
              account:
                type: string
                example: "testid"
              name:
                type: string
                example: "testname"
              email:
                type: string
                example: "test@gabia.com"
              password:
                type: string
                example: "testpass"
    PatchUser:
      description: '사용자 정보 변경'
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: ""
              email:
                type: string
                example: "test2@gabia.com"
              password:
                type: string
                example: ""
              userRole:
                type: string
                example: ""
    PostTeamAuths:
      description: '사용자 권한 변경'
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - teamId
              - uid
              - authId
            properties:
              teamId:
                type: string
              uid:
                type: string
              authId:
                type: string
    PatchTeamAuthUserTeam:
      description: '팀원 권한 수정'
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - authId
            properties:
              authId:
                type: string
    PostTeams:
      description: '팀 생성'
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - teamAccount
              - name
              - userAccount
            properties:
              teamAccount:
                type: string
              name:
                type: string
              userAccount:
                type: string
    PatchTeam:
      description: '팀명 수정'
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              teamAccount:
                type: string
              name:
                type: string
              userAccount:
                type: string
    PostTeamUsers:
      description: '팀원 추가'
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - teamAccount
              - userAccount
              - authType
            properties:
              teamAccount:
                type: string
              userAccount:
                type: string
              authType:
                type: string
    PatchTeamUsers:
      description: '팀원 추가'
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - teamAccount
              - userAccount
              - authType
            properties:
              teamAccount:
                type: string
              userAccount:
                type: string
              authType:
                type: string
    PostCronReadAuthsUsersCrons:
      description: '유저 크론 추가'
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - cronJobId
            properties:
              cronJobId:
                type: string
                format: uuid
    PostCronReadAuthsTeamsCrons:
      description: '팀 크론 추가'
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - cronJobId
            properties:
              cronJobId:
                type: string
                format: uuid
    PatchCronReadAuthsTeamsCrons:
      description: '팀 크론 변경'
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - userId
              - teamId
              - serverIp
              - cronName
              - cronExpr
              - minTime
            properties:
              userId:
                type: string
              teamId:
                type: string
              serverIp:
                type: string
              cronName:
                type: string
              cronExpr:
                type: string
              minTime:
                type: integer
    PostNotificationsUsers:
      description: '알림 구독 추가'
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - rcvUserId
              - createUserId
              - cronJobId
            properties:
              rcvUserId:
                type: string
              createUserId:
                type: string
              cronJobId:
                type: string
                format: uuid
    PatchNotificationsUsers:
      description: '알림 수정'
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - notId
              - notType
            properties:
              notId:
                type: integer
              notType:
                type: string
    PostWebhook:
      description: '웹훅 추가'
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - endpoint
              - url
            properties:
              endpoint:
                type: string
              url:
                type: string
                format: uri
    PatchWebhook:
      description: '웹훅 수정'
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - endpoint
              - url
            properties:
              endpoint:
                type: string
              url:
                type: string
                format: uri
    PostNotice:
      description: '알림 추가'
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - cronJobId
              - noticeType
              - noticeMessage
              - noticeCreateDateTime
            properties:
              cronJobId:
                type: string
                format: uuid
              noticeType:
                type: string
              noticeMessage:
                type: string
              noticeCreateDateTime:
                type: string
  securitySchemes:
    bearerToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
      in: header

security:
  - bearerToken: []
externalDocs:
  url: "https://cronmonitor.atlassian.net/wiki/spaces/DOCUMENTAT/overview"
  description: "confluence"